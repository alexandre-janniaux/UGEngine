#pragma once

#include <map>
#include <vector>
#include <iostream>

#include <UGEngine/Core/DestructionListener.hpp>


namespace uge {

////////////////////////////////////////////////////////////
template <typename Msg>
class MessageHandler;

class MessageSender;
	
////////////////////////////////////////////////////////////
/// MessageSender implementation for the different kind of message
/// @seealso MessageSender MessageHandler
////////////////////////////////////////////////////////////
template <typename Msg>
class MessageSenderImpl :
	public DestructionListener<MessageSender>
{
////////////////////////////////////////////////////////////
public:
////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// Bind a MessageHandler as a message listener
    /// @param handler : the MessageHandler to bind
    ////////////////////////////////////////////////////////////
	void bind (MessageHandler<Msg>& listener);

    ////////////////////////////////////////////////////////////	
    /// Unbind a MessageHandler to stop listening message
    /// @param handler : the MessageHandler to unbind
    ////////////////////////////////////////////////////////////
	void unbind (MessageHandler<Msg>& listener);

    ////////////////////////////////////////////////////////////
    /// Broadcast a message to listening MessageHandler
    /// @param message : the message to broadcast
    ////////////////////////////////////////////////////////////
	void broadcast (Msg& message);

	////////////////////////////////////////////////////////////
	/// Get the MessageSenderImpl associated with the MessageSender instance
	/// @param instance : the MessageSender instance
	/// @return a MessageSenderImpl<Msg> instance
	////////////////////////////////////////////////////////////
	static MessageSenderImpl<Msg>& get(MessageSender& instance);

////////////////////////////////////////////////////////////
protected:
////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    void onTriggerDestruction(MessageSender* instance);

////////////////////////////////////////////////////////////
private:
////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////
	MessageSenderImpl() = default;

	////////////////////////////////////////////////////////////
	virtual ~MessageSenderImpl();

	////////////////////////////////////////////////////////////
	std::vector<MessageHandler<Msg>*> m_listeners;

    ////////////////////////////////////////////////////////////
	static std::map<MessageSender*, MessageSenderImpl<Msg>*> m_instances;
};

}


#include <UGEngine/Message/MessageSenderImpl.ipp>

