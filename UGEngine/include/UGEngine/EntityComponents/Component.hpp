#pragma once

#include <UGEngine/Core/Type.hpp>

namespace uge {

class Entity;

////////////////////////////////////////////////////////////
class Component {

////////////////////////////////////////////////////////////
public:
////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////
	/// Initialize the component on an entity object
	////////////////////////////////////////////////////////////
	Component (Entity& entity);

	////////////////////////////////////////////////////////////
	/// Disconnect
	////////////////////////////////////////////////////////////
	virtual ~Component();

	Entity& getEntity();

	////////////////////////////////////////////////////////////
	/// broadcast a message to the owner composant's entity with a message and its parameters
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	template <typename T, typename... Args>
	void broadcastToEntity(Entity& entity, Args... args);

////////////////////////////////////////////////////////////
private:
////////////////////////////////////////////////////////////

	Entity& m_entity;
};

} // namespace uge

#include <UGEngine/EntityComponents/Component.ipp>