#pragma once

#include <UGEngine/Core/Type.hpp>
#include <UGEngine/Core/DestructionTrigger.hpp>
#include <UGEngine/Core/NonCopyable.hpp>


namespace uge {

template <typename T>
class MessageHandler;

class Entity;

////////////////////////////////////////////////////////////
class Component : public NonCopyable, public DestructionTrigger {

////////////////////////////////////////////////////////////
public:
////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////
	/// Initialize the component on an entity object
	////////////////////////////////////////////////////////////
	Component (Entity& entity);

	////////////////////////////////////////////////////////////
	Entity& getEntity();

	////////////////////////////////////////////////////////////
	/// broadcast a message to the owner composant's entity with a message and its parameters
	////////////////////////////////////////////////////////////
	template <typename T>
	void broadcastToEntity(Entity& entity, T& message);

	////////////////////////////////////////////////////////////
	template <typename T>
	void broadcast(T& message);

	////////////////////////////////////////////////////////////
	template <typename T>
	void bind(MessageHandler<T>& destination);

////////////////////////////////////////////////////////////
private:
////////////////////////////////////////////////////////////

	Entity& m_entity;
};

} // namespace uge

#include <UGEngine/Entity/Core/Component.ipp>